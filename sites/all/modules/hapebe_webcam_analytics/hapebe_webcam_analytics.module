<?php

/**
* Implements hook_menu().
*/
function hapebe_webcam_analytics_menu() {
  $items = array();
  /* $items['admin/config/content/hapebe_webcam_analytics'] = array(
    'title' => 'Current posts',
    'description' => 'Configuration for Current posts module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hapebe_webcam_analytics_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  ); */
  $items['webcam-analytics'] = array(
    'title' => 'hapebe Webcam Image Analytics - Overview',
    'description' => 'Entry point and overview',
    'page callback' => 'hapebe_webcam_analytics_page_test',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'hapebe_webcam_analytics.pages.inc.php',
  );
  $items['webcam-analytics/view'] = array(
    'title' => 'hapebe Webcam Image Analytics - View and Navigate',
    'description' => 'Display single images and their stats, browse and navigate',
    'page callback' => 'hapebe_webcam_analytics_page_view',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'hapebe_webcam_analytics.pages.inc.php',
  );
  $items['webcam-analytics/process'] = array(
    'title' => 'hapebe Webcam Image Analytics - Data Processing Routines',
    'page callback' => 'hapebe_webcam_analytics_page_process',
    'page arguments' => array(2, 3, 4),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
    'file' => 'hapebe_webcam_analytics.pages.inc.php',
  );
  $items['webcam-analytics/sets'] = array(
    'title' => 'hapebe Webcam Image Analytics - Sets Management and Processing',
    'page callback' => 'hapebe_webcam_analytics_page_sets',
    'page arguments' => array(2, 3, 4),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
    'file' => 'hapebe_webcam_analytics.pages.inc.php',
  );
  $items['webcam-analytics/ajax'] = array(
    'title' => 'hapebe Webcam Image Analytics - Asynchronous JS Services',
    'page callback' => 'hapebe_webcam_analytics_ajax',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'hapebe_webcam_analytics.ajax.inc.php',
  );
  return $items;
}

/**
 * $arg0 can be an array that will be merged into the config (write access!)
 */
function hapebe_webcam_analytics_config($arg0 = FALSE) {
    static $config;

    if (!isset($config)) {
		date_default_timezone_set('UTC');
		
		$config = array(
			'STORAGE_BASE_DIR' => '/media/sf_webcam-storage/feodora',
			// if auto-mount fails, this can be mounted (on the Xenia machine) using:
			// sudo mount -t vboxsf webcam-storage /media/sf_webcam-storage/
			'PIXEL_COUNT_OPT' => 100000,
			'FILE_BASE_PATH' => drupal_realpath(file_default_scheme() . '://') . '/webcam',
			'HTTP_ROOT' => base_path(),
			'YEAR_START' => strtotime('2017-07-31 22:00'),
			'YEAR_END' => strtotime('2018-07-31 21:59'),
		);
    }
    
    if ($arg0 !== FALSE) {
		if (is_array($arg0)) {
			foreach ($arg0 as $k => $v) {
				$config[$k] = $v;
			}
		}
    }
    
    return $config;
}

/** 
 * is used by:
 * hapebe_webcam_analytics_page_calc_stats() (/process/calc-stats/{$unixtime})
 * hapebe_webcam_analytics_ajax_run_job() (via AJAX on: /webcam-analytics/process/{job})
 *
 * the variables generated by this function should match the list in:
 * WebcamAnalyzer::exportVarList()
 */
function hapebe_webcam_calc_stats($image, $writeFiles = FALSE) {
	$retval = array();

	$fileOutputName = FALSE;
	if ($writeFiles) $fileOutputName = $image->sha256;
	
	$retval[] = '<p>SHA256: ' . $image->sha256 . '</p>';

	$filename = $image->getFullFilename();
	$im = ImageCreateFromJPEG($filename);
	if ($im == FALSE) {
		$retval[] = 'Could not open image file ' . $filename . ' as GD resource.';
		return implode("\n", $retval);	
	}
	
	$a = new WebcamAnalyzer($im);
	if ($writeFiles) {
		$a->writeStatImages(true); // true: mark regions
	}
	
	// for the complete image:
	$stats = FALSE;
	$stats = $a->getStats(FALSE, $fileOutputName);
	if (!$stats) return FALSE; // TODO error message

	extract($stats); // => $v, $c2, $lcb
	$dbStats = array(
		'v_mean' => $v['mean'],
		'v_sd' => $v['sd'],
		'v_q01' => $v['q01'],
		'v_q05' => $v['q05'],
		'v_q25' => $v['q25'],
		'v_med' => $v['median'],
		'v_q75' => $v['q75'],
		'v_q95' => $v['q95'],
		'v_q99' => $v['q99'],
		'c2_mean' => $c2['mean'],
		'c2_sd' => $c2['sd'],
		'c2_med' => $c2['median'],
		'lcb_mean' => $lcb['mean'],
		'lcb_sd' => $lcb['sd'],
		'lcb_med' => $lcb['median'],
	);
	$retval[] = '<h3>L709 Value Stats:</h3><p>' . print_r($v, true) . '</p>';
	$retval[] = '<h3>HSV Chroma2 Stats:</h3><p>' . print_r($c2, true) . '</p>';
	$retval[] = '<h3>Local Contrast (boosted) Stats:</h3><p>' . print_r($lcb, true) . '</p>';
	
	// and now, for all regions:
	foreach ($a->regions as $region => $xywh) {
		// skip the two caption regions:
		if ($region == 'CAPTIONLEFT') continue;
		if ($region == 'CAPTIONRIGHT') continue;
		
		$stats = $a->getStats($region, $fileOutputName);
		if (!$stats) return FALSE; // TODO error message
		extract($stats); // => $vStats, $cStats
		
		// copy some to $dbStats:
		$dbStats['v_'. $region . '_mean'] = $v['mean'];
		$dbStats['v_'. $region . '_sd'] = $v['sd'];
		$dbStats['v_'. $region . '_med'] = $v['median'];
		// .. and some special additions:
		if ($region == 'GARDENBOAT') {
			$dbStats['v_'. $region . '_q95'] = $v['q95'];
			$dbStats['v_'. $region . '_q99'] = $v['q99'];
		}
		
		$dbStats['c2_'. $region . '_mean'] = $c2['mean'];
		$dbStats['c2_'. $region . '_sd'] = $c2['sd'];
		$dbStats['c2_'. $region . '_med'] = $c2['median'];
		
		$dbStats['lcb_'. $region . '_mean'] = $lcb['mean'];
		$dbStats['lcb_'. $region . '_sd'] = $lcb['sd'];
		$dbStats['lcb_'. $region . '_med'] = $lcb['median'];
		
	}
	
	$retval[] = '<h3>Stats to DB:</h3>';
	foreach ($dbStats as $key => $value) {
		$retval[] = $key . ' = ' . $value . "<br>\n";
	}
	
	$image->setStats($dbStats);

	return implode("\n", $retval);	
}

?>